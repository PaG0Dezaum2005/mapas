services:
  php:
    image: ghcr.io/redemapas/mapas:feat-new-theme
    depends_on:
      - database
    restart: unless-stopped
    environment:
      PWA_UPSTREAM: ${PWA_UPSTREAM}
      SERVER_NAME: ${SERVER_NAME}
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_PUBLISHER_JWT_KEY}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_SUBSCRIBER_JWT_KEY}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS}
      DATABASE_URL: ${DATABASE_URL}
      MERCURE_URL: ${MERCURE_URL}
      MERCURE_PUBLIC_URL: ${MERCURE_PUBLIC_URL}
      MERCURE_JWT_SECRET: ${MERCURE_JWT_SECRET}
      BUILD_ASSETS: ${BUILD_ASSETS}
      PENDING_PCACHE_RECREATION_INTERVAL: ${PENDING_PCACHE_RECREATION_INTERVAL}
      JOBS_INTERVAL: ${JOBS_INTERVAL}
      REDIS_CACHE: ${REDIS_CACHE}
      MAILER_TRANSPORT: ${MAILER_TRANSPORT}
      MAILER_FROM: ${MAILER_FROM}
      NUM_PROCESSES: ${NUM_PROCESSES}
      MC_UPDATES_PROCESSES: ${MC_UPDATES_PROCESSES}
      GOOGLE_RECAPTCHA_SITEKEY: ${GOOGLE_RECAPTCHA_SITEKEY}
      GOOGLE_RECAPTCHA_SECRET: ${GOOGLE_RECAPTCHA_SECRET}
      SESSIONS_SAVE_PATH: ${SESSIONS_SAVE_PATH}
    # build:
      # context: ./api
      # target: frankenphp_dev
    volumes:
      # - ./api:/app
      # - /app/var
      - var-files:/app/var/private-files
      - user-public-files:/app/mapas/public/files
      # - ./api/frankenphp/Caddyfile:/etc/caddy/Caddyfile:ro
      # - ./api/frankenphp/conf.d/app.dev.ini:/usr/local/etc/php/conf.d/app.dev.ini:ro
      - caddy_data:/data
      - caddy_config:/config

  web:
    image: ghcr.io/redemapas/mapas:feat-new-theme
    extends:
      service: php
    ports:
      # HTTP
      - target: 80
        published: 5020
        protocol: tcp

  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin
  #   ports:
  #     - 5050:80
  crontab:
    image: rancher/container-crontab:v0.5.0
    restart: '${DOCKER_RESTART_POLICY:-always}'
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  recreate-pending-pcache:
    image: ghcr.io/redemapas/mapas:feat-new-theme
    extends:
      service: php
    command: php ./mapas/src/tools/recreate-pending-pcache.php
    depends_on:
      - php
    volumes:
      # - ./api:/app
      - var-files:/app/var/private-files
    labels:
      - "cron.schedule=* * * ? * *"

  execute-job:
    image: ghcr.io/redemapas/mapas:feat-new-theme
    extends:
      service: php
    command: php ./mapas/src/tools/execute-job.php
    depends_on:
      - php
    volumes:
      # - ./api:/app
      - var-files:/app/var/private-files
    labels:
      - "cron.schedule=* * * ? * *"

  # db-update:
  #   extends:
  #     service: php
  #   command: php mapas/src/tools/apply-updates.php
  #   depends_on:
  #     - database
  #   volumes:
  #     # - ./api:/app
  #     - var-files:/app/var/private-files

  # mc-update:
  #   extends:
  #     service: php
  #   command: php mapas/src/tools/apply-multicore-db-update.php
  #   depends_on:
  #     - database
  #   volumes:
  #     # - ./api:/app
  #     - var-files:/app/var/private-files

  redis:
    image: redis:6
    restart: unless-stopped
    command: --maxmemory 128Mb --maxmemory-policy allkeys-lru
    volumes:
      - redis:/data

  sessions:
    image: redis:6
    restart: unless-stopped
    command: --maxmemory 128Mb --maxmemory-policy allkeys-lru
    volumes:
      - sessions:/data

  mailhog:
    image: mailhog/mailhog
    # ports:
    #   - "8025:8025"

    # pwa:
    #   image: redemapas/mapas-pwa
    #   build:
    #     context: ./pwa
    #     target: dev
    #   volumes:
    #     - ./pwa:/srv/app
    #   environment:
    #     API_PLATFORM_CREATE_CLIENT_ENTRYPOINT: http://php
    #     API_PLATFORM_CREATE_CLIENT_OUTPUT: .
    #     NEXT_PUBLIC_ENTRYPOINT: http://php

  database:
    image: kartoza/postgis:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATADIR: ${DATADIR}
    volumes:
      - db_data:/opt/postgres/data
      #- ./api/mapas/dev/db:/docker-entrypoint-initdb.d
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"

volumes:
  caddy_data:
  caddy_config:
  var-files:
  db_data:
  sessions:
  redis:
  pgadmin:
  user-public-files:
